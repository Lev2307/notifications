from telebot import TeleBot
from telebot import types
import os

from django.core.management.base import BaseCommand
from django.core.exceptions import ObjectDoesNotExist

from authentication.models import MyUser, UserTelegram

# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ—Ç–∞
bot = TeleBot(os.environ.get('TELEGRAM_TOKEN'), threaded=False)

class Command(BaseCommand):
    help = "`Notifications` telegram bot"

    def add_arguments(self, parser):
        bot.enable_save_next_step_handlers(delay=2)
        bot.load_next_step_handlers()
        bot.infinity_polling()

    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        try:
            telegram_account = UserTelegram.objects.get(chat_id=message.chat.id)
            user = MyUser.objects.get(users_telegram=telegram_account)
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', callback_data='/subscribe'
                )
            )
            bot.reply_to(message, f"üëã –ü—Ä–∏–≤–µ—Ç, {user.username} \n –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=keyboard)
        except ObjectDoesNotExist:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    '–ü—Ä–∏–≤—è–∑–∫–∞ –±–æ—Ç–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É notifications!', callback_data='/adding_telegram'
                )
            )
            bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! \n–Ø notifications bot ü§ñ\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda c: c.data == '/adding_telegram')
    def process_callback_adding_telegram(callback_query: types.CallbackQuery):
        bot.answer_callback_query(callback_query.id)
        bot.send_message(callback_query.from_user.id, f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ [—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ](http://127.0.0.1/auth/telegram?chat_id={callback_query.from_user.id}&username={callback_query.from_user.username})', parse_mode='MarkdownV2')
    
    @bot.callback_query_handler(func=lambda c: c.data == '/subscribe')
    def process_callback_subscribe_info(callback_query: types.CallbackQuery):
        user_tg = UserTelegram.objects.get(chat_id=callback_query.from_user.id)
        user = MyUser.objects.get(users_telegram=user_tg)
        if user.is_subscribed:
            bot.send_message(user_tg.chat_id, '–í—ã –∫—Ä—É—Ç–æ–π! –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞')
        else:
            bot.send_message(user_tg.chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏')