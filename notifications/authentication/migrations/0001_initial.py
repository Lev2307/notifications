# Generated by Django 3.2.18 on 2023-08-17 13:48

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_subscribed', models.BooleanField(default=False, verbose_name='Subscribed')),
                ('tz', models.CharField(choices=[('Atlantic/Reykjavik', 'UTC 00:00 ( for example Reykjavik, Lisbon '), ('Europe/London', 'UTC +01:00 ( for example, London, Dublin )'), ('Europe/Kaliningrad', 'UTC +02:00 ( for example, Kaliningrad, Berlin, Paris, Warsaw, Zagreb )'), ('Europe/Moscow', 'UTC +03:00 ( for example, Moscow, Riga, Saint Petersburg, Minsk, Volgograd, Kirov )'), ('Europe/Samara', 'UTC +04:00 ( for example, Baku, Tbilisi, Yerevan, Samara, Ulyanovsk )'), ('Asia/Kabul', 'UTC +04:30 ( for example, Kabul )'), ('Asia/Yekaterinburg', 'UTC +05:00 ( for example, Yekaterinburg, Tashkent )'), ('Asia/Almaty', 'UTC +06:00 ( for example, Almaty, Omsk, Bishkek )'), ('Asia/Krasnoyarsk', 'UTC +07:00 ( for example, Novosibirsk, Krasnoyarsk, Novokuznetsk, Bangkok, Hanoi, Jakarta )'), ('Asia/Irkutsk', 'UTC +08:00 ( for example, Irkutsk, Beijing, Hong Kong, Singapore )'), ('Asia/Yakutsk', 'UTC +09:00 ( for example, Yakutsk, Tokyo, Osaka )'), ('Asia/Vladivostok', 'UTC +10:00 ( for example, Vladivostok, Canberra, Melbourne, Sydney )'), ('Asia/Magadan', 'UTC +11:00 ( for example, Magadan, Solomon Islands, New Caledonia )'), ('Asia/Kamchatka', 'UTC +12:00 ( for example, Fiji Islands, Kamchatka, Marshall Islands )'), ('EST', 'UTC -05:00  (Eastern US and Canada)'), ('US/Central', 'UTC -06:00 ( for example, Central America )'), ('US/Arizona', 'UTC -07:00 ( for example, Arizona )'), ('US/Alaska', 'UTC -08:00 ( for example, Alaska )'), ('US/Hawaii', 'UTC -10:00 ( for example, Hawaii )')], default='Atlantic/Reykjavik', max_length=100, verbose_name='Timezone')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTelegram',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('telegram_user', models.CharField(blank=True, max_length=150, null=True, verbose_name='User`s telegram username')),
                ('chat_id', models.CharField(blank=True, max_length=10, null=True, verbose_name='Chat id')),
                ('started_time', models.DateTimeField(blank=True, null=True, verbose_name='Added at')),
            ],
            options={
                'verbose_name': 'User telegram account',
                'verbose_name_plural': 'User telegram accounts',
            },
        ),
        migrations.CreateModel(
            name='ChooseSendingNotifications',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender', models.CharField(max_length=25, verbose_name='Social network')),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
                ('linked_network', models.BooleanField(default=False, verbose_name='Provided network')),
                ('slug', models.SlugField(blank=True, max_length=25, null=True, verbose_name='Slug')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sending Network',
                'verbose_name_plural': 'Sending Networks',
                'ordering': ['user', '-sender'],
            },
        ),
        migrations.AddField(
            model_name='myuser',
            name='choose_sending',
            field=models.ManyToManyField(to='authentication.ChooseSendingNotifications', verbose_name='Social networks'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='users_telegram',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authentication.usertelegram', verbose_name='User tg'),
        ),
    ]
